package mind.engine;
import java.util.ArrayList;import java.util.List;import mind.arch.GeoPoint;import jason.asSyntax.*;
import jason.environment.*;
public class ProtocolConnection extends Environment {	private BridgeLayer bridgeConnection = new BridgeLayer();	private GeoPoint home;	private List<GeoPoint> path = null;	
    /** Called before the MAS execution with the args informed in .mas2j */    @Override    public void init(String[] args) {        super.init(args);        path = new ArrayList<GeoPoint>();    }
    @Override    public boolean executeAction(String agName, Structure action) {    	    	if (action.getFunctor().equals("uavasPrint")) {    		System.out.println((((VarTerm)action.getTerm(0)).toString()));    	}    	    	// misc actions ========================================================    	if (action.getFunctor().equals("getWayPointAt")) {    		// Uploads a waypoint in the waypoint list to the BB    		int index = Integer.parseInt(action.getTerm(0).toString());    		removePerceptsByUnif(agName, Literal.parseLiteral("curWayPoint(_,_,_)"));    		if (path.size() >= index) {	    		GeoPoint p = path.get(index);	    		double lat = p.getLatitute();	    		double lon = p.getLongitude();	    		double hei = p.getHeight();	    		addPercept(agName, Literal.parseLiteral(					"curWayPoint(" + lat + "," + lon + "," + hei + ")"				));	    		System.out.println("Uploaded waypoint: " + "(" + lat + "," + lon + "," + hei + ")");    		} else {    			addPercept(agName, Literal.parseLiteral(					"curWayPoint(null)"				));    		}    	} else if (action.getFunctor().equals("uavasInit")) {    		// Set [patrol] flag to [no]    		removePerceptsByUnif(agName, Literal.parseLiteral("patrol(_)"));    		addPercept(agName, Literal.parseLiteral("patrol(no)"));    		System.out.println("patrol mode: off");    		// Clear/Reset the waypoint list    		path = new ArrayList<GeoPoint>();    		removePerceptsByUnif(agName, Literal.parseLiteral("curWayPoint(_,_,_)"));    		System.out.println("waypoint list cleaned");    		// Check current location    		GeoPoint p = bridgeConnection.check_location();    		double lat = p.getLatitute();    		double lon = p.getLongitude();    		double hei = p.getHeight();    		removePerceptsByUnif(agName, Literal.parseLiteral("location(_,_,_)"));    		addPercept(agName, Literal.parseLiteral(				"location(" + lat + "," + lon + "," + hei + ")"			));    		System.out.println("Current location: " + lat + "," + lon + "," + hei + ")");    		// Set current location as the home position    		removePerceptsByUnif(agName, Literal.parseLiteral("home(_,_,_)"));    		addPercept(agName, Literal.parseLiteral("home(" + lat + "," + lon + "," + hei + ")"));    		home = new GeoPoint(lat, lon, hei);    		System.out.println("home set to: " + "(" + lat + "," + lon + "," + hei + ")");    		// Check battery level    		double battery = bridgeConnection.check_battery();    		removePerceptsByUnif(agName, Literal.parseLiteral("battery(_)"));    		addPercept(agName, Literal.parseLiteral("battery(" + battery + ")"));    		System.out.println("Battery at level: " + battery + ")");    		// Check system status    		String status = bridgeConnection.check_system();    		removePerceptsByUnif(agName, Literal.parseLiteral("status(_)"));    		addPercept(agName, Literal.parseLiteral("status(" + status + ")"));    		System.out.println("System status: " + status + ")");    	} else if (action.getFunctor().equals("clearPath")) {    		// Set [patrol] flag to [no]    		removePerceptsByUnif(agName, Literal.parseLiteral("patrol(_)"));    		addPercept(agName, Literal.parseLiteral("patrol(no)"));    		System.out.println("patrol mode: off");    		// Clear/Reset the waypoint list    		path = new ArrayList<GeoPoint>();    		removePerceptsByUnif(agName, Literal.parseLiteral("curWayPoint(_,_,_)"));    		System.out.println("waypoint list cleaned");    		// Stops in the current location    		GeoPoint p = bridgeConnection.check_location();    		double lat = p.getLatitute();    		double lon = p.getLongitude();    		double hei = p.getHeight();    		bridgeConnection.move_to(new GeoPoint(lat, lon, hei));    		System.out.println("Stopping in: " + "(" + lat + "," + lon + "," + hei + ")");    	// logistic actions ====================================================    	} else if (action.getFunctor().equals("moveTo")) {    		// Set [patrol] flag to [no]    		removePerceptsByUnif(agName, Literal.parseLiteral("patrol(_)"));    		addPercept(agName, Literal.parseLiteral("patrol(no)"));    		System.out.println("patrol mode: off");    		// Call act firmware: [Send target Position], with passed point as argument    		double lat = Double.parseDouble(action.getTerm(0).toString());    		double lon = Double.parseDouble(action.getTerm(1).toString());    		double hei = Double.parseDouble(action.getTerm(2).toString());    		bridgeConnection.move_to(new GeoPoint(lat, lon, hei));    		System.out.println("going to: " + "(" + lat + "," + lon + "," + hei + ")");    	} else if (action.getFunctor().equals("doPatrol")) {    		// TODO: not implemented    	} else if (action.getFunctor().equals("addWayPoint")) {    		// Adds a new point in waypoint list			double lat = Double.parseDouble(action.getTerm(0).toString());    		double lon = Double.parseDouble(action.getTerm(1).toString());    		double hei = Double.parseDouble(action.getTerm(2).toString());    		path.add(new GeoPoint(lat, lon, hei));    		System.out.println("Point (" + lat + "," + lon + "," + hei + ") added.");    		// Updates the total distance of the path    				// positional actions ==================================================    	} else if (action.getFunctor().equals("setHome")) {    		// Update a new point as home position    		double lat = Double.parseDouble(action.getTerm(0).toString());    		double lon = Double.parseDouble(action.getTerm(1).toString());    		double hei = Double.parseDouble(action.getTerm(2).toString());    		removePerceptsByUnif(agName, Literal.parseLiteral("home(_,_,_)"));    		addPercept(agName, Literal.parseLiteral("home(" + lat + "," + lon + "," + hei + ")"));    		home = new GeoPoint(lat, lon, hei);    		System.out.println("home set to: " + "(" + lat + "," + lon + "," + hei + ")");    	} else if (action.getFunctor().equals("goHome")) {    		// Set [patrol] flag to [no]    		removePerceptsByUnif(agName, Literal.parseLiteral("patrol(_)"));    		addPercept(agName, Literal.parseLiteral("patrol(no)"));    		System.out.println("patrol mode: off");    		// Call act firmware: [Send target Position], with [home] point as argument    		double lat = home.getLatitute();    		double lon = home.getLongitude();    		double hei = home.getHeight();    		bridgeConnection.move_to(new GeoPoint(lat, lon, hei));    		System.out.println("target set to: " + "(" + lat + "," + lon + "," + hei + ")");		// communication actions ===============================================    	} else if (action.getFunctor().equals("request")) {    		// TODO: not implemented    	} else if (action.getFunctor().equals("inform")) {    		// TODO: not implemented    	} else if (action.getFunctor().equals("ask")) {    		// TODO: not implemented    	} else if (action.getFunctor().equals("ack")) {    		// TODO: not implemented		// data retrieve actions ===============================================    	} else if (action.getFunctor().equals("checkSystem")) {    		// Perceive about the system status    		String status = bridgeConnection.check_system();    		removePerceptsByUnif(agName, Literal.parseLiteral("status(_)"));    		addPercept(agName, Literal.parseLiteral("status(" + status + ")"));    		System.out.println("System status: " + status + ")");    	} else if (action.getFunctor().equals("checkBattery")) {    		// Perceive about the battery level    		double battery = bridgeConnection.check_battery();    		removePerceptsByUnif(agName, Literal.parseLiteral("battery(_)"));    		addPercept(agName, Literal.parseLiteral("battery(" + battery + ")"));    		System.out.println("Battery at level: " + battery + ")");    	} else if (action.getFunctor().equals("checkLocation")) {    		// Perceive about the current location    		GeoPoint p = bridgeConnection.check_location();    		double lat = p.getLatitute();    		double lon = p.getLongitude();    		double hei = p.getHeight();    		removePerceptsByUnif(agName, Literal.parseLiteral("location(_,_,_)"));    		addPercept(agName, Literal.parseLiteral(				"location(" + lat + "," + lon + "," + hei + ")"			));    		System.out.println("Current location: " + lat + "," + lon + "," + hei + ")");    	}        return true;    }
    /** Called before the end of MAS execution */    @Override    public void stop() {        super.stop();    }
}

