package simulators.fmssim;import mind.engine.ProtocolConnection;import jason.asSyntax.*;public class FMSSimEnvironment extends ProtocolConnection {	protected FMSActPerceptConverter bridgeConnection = null;	protected enum FMSActions {		calibrateMinValue, calibrateMidValue, calibrateMaxValue, collective, roll, pitch, yaw	}	@Override	public void init(String[] args) {		super.init(args);		// trade the default bridge connector for the FMS bridge connector		bridgeConnection = new FMSActPerceptConverter();	}	@Override	public boolean executeAction(String agName,			Structure action) {		super.executeAction(agName, action);		FMSActions act = null;		try {			act = FMSActions.valueOf(action.getFunctor()					.toString());		} catch (IllegalArgumentException e) {			return true;		}		if (action.getFunctor().equals("FMSPrint")) {			System.out					.println(((VarTerm) action.getTerm(0)));		}		switch (act) {		// methods for calibration		case calibrateMinValue:			iom.write("ñ=11111111", 2);			break;		case calibrateMidValue:			iom.write("ñ=55555555", 2);			break;		case calibrateMaxValue:			iom.write("ñ=99999999", 2);			break;		// logistic low-abstract actions		case collective:			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			bridgeConnection.coletive((int) Double					.parseDouble(action.getTerm(0)							.toString()));			break;		case roll:			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			bridgeConnection.roll((int) Double					.parseDouble(action.getTerm(0)							.toString()));			break;		case pitch:			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			bridgeConnection.pitch((int) Double					.parseDouble(action.getTerm(0)							.toString()));			break;		case yaw:			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			bridgeConnection.yaw((int) Double					.parseDouble(action.getTerm(0)							.toString()));			break;		default:			;		}		return true;	}}