package mind.engine;import mind.mkmodel.MKActPerceptConverter;import jason.asSyntax.*;import jason.environment.*;public class ProtocolConnection extends Environment {	protected enum UAVASActions {		uavasInit, clearPath, getWayPointAt, moveTo,		doPatrol, addWayPoint, setHome, goHome, request,		inform, ask, ack, checkSystem, checkBattery, checkLocation	}	protected MKActPerceptConverter bridgeConnection = null;	protected IOManager iom = null;	@Override	public void init(String[] args) {		super.init(args);		iom = new IOManager();		bridgeConnection = new MKActPerceptConverter();	}	@Override	public boolean executeAction(String agName,			Structure action) {		GeoPoint p = null;		UAVASActions act = null;		try {			act = UAVASActions.valueOf(action.getFunctor()					.toString());		} catch (IllegalArgumentException e) {			return true;		}		switch (act) {		// MISC ACTIONS		case uavasInit:			// Set [patrol] flag to [no]			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			// Clear/Reset the waypoint list			removePerceptsByUnif(					agName,					Literal.parseLiteral("curWayPoint(_,_,_)"));			// Check current location			p = bridgeConnection.check_location();			removePerceptsByUnif(agName,					Literal.parseLiteral("location(_,_,_)"));			addPercept(					agName,					Literal.parseLiteral("location("							+ p.getLatitute() + ","							+ p.getLongitude() + ","							+ p.getHeight() + ")"));			// Set current location as the home position			removePerceptsByUnif(agName,					Literal.parseLiteral("home(_,_,_)"));			addPercept(					agName,					Literal.parseLiteral("home("							+ p.getLatitute() + ","							+ p.getLongitude() + ","							+ p.getHeight() + ")"));			bridgeConnection.set_home(new GeoPoint(p					.getLatitute(), p.getLongitude(), p					.getHeight()));			// Check battery level			double battery = bridgeConnection					.check_battery();			removePerceptsByUnif(agName,					Literal.parseLiteral("battery(_)"));			addPercept(					agName,					Literal.parseLiteral("battery("							+ battery + ")"));			// Check system status			String status = bridgeConnection.check_system();			removePerceptsByUnif(agName,					Literal.parseLiteral("status(_)"));			addPercept(					agName,					Literal.parseLiteral("status(" + status							+ ")"));			break;		case clearPath:			// Set [patrol] flag to [no]			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			// Clear/Reset the waypoint list			removePerceptsByUnif(					agName,					Literal.parseLiteral("curWayPoint(_,_,_)"));			break;		// LOGISTIC ACTIONS		case moveTo:			// Set [patrol] flag to [no]			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			// Call act firmware: [Send target Position], with passed point as			// argument			bridgeConnection.move_to(new GeoPoint(Float					.parseFloat(action.getTerm(0)							.toString()), Float					.parseFloat(action.getTerm(1)							.toString()), Float					.parseFloat(action.getTerm(2)							.toString())));			break;		case doPatrol:			// TODO: not implemented in protocol level yet			break;		case addWayPoint:			// Adds a new point in waypoint list			bridgeConnection.add_waypoint(new GeoPoint(					Float.parseFloat(action.getTerm(0)							.toString()), Float							.parseFloat(action.getTerm(1)									.toString()), Float							.parseFloat(action.getTerm(2)									.toString())));			break;		case setHome:			// Update a new point as home position			removePerceptsByUnif(agName,					Literal.parseLiteral("home(_,_,_)"));			addPercept(agName, Literal.parseLiteral("home("					+ Double.parseDouble(action.getTerm(0)							.toString())					+ ","					+ Double.parseDouble(action.getTerm(1)							.toString())					+ ","					+ Double.parseDouble(action.getTerm(2)							.toString()) + ")"));			bridgeConnection.set_home(new GeoPoint(Float					.parseFloat(action.getTerm(0)							.toString()), Float					.parseFloat(action.getTerm(1)							.toString()), Float					.parseFloat(action.getTerm(2)							.toString())));			break;		case goHome:			// Set [patrol] flag to [no]			removePerceptsByUnif(agName,					Literal.parseLiteral("patrol(_)"));			addPercept(agName,					Literal.parseLiteral("patrol(no)"));			// Call act firmware: [Send target Position], with [home] point as			// argument			GeoPoint home = bridgeConnection.get_home();			bridgeConnection.move_to(new GeoPoint(home					.getLatitute(), home.getLongitude(),					home.getHeight()));			break;		case request:			// TODO: not implemented in this level			break;		case inform:			// TODO: not implemented in this level			break;		case ask:			// TODO: not implemented in this level			break;		case ack:			// TODO: not implemented in this level			break;		// PERCEIVE ACTIONS		case checkSystem:			// Perceive about the system status			removePerceptsByUnif(agName,					Literal.parseLiteral("status(_)"));			addPercept(					agName,					Literal.parseLiteral("status("							+ bridgeConnection									.check_system() + ")"));			break;		case checkBattery:			// Perceive about the battery level			removePerceptsByUnif(agName,					Literal.parseLiteral("battery(_)"));			addPercept(					agName,					Literal.parseLiteral("battery("							+ bridgeConnection									.check_battery() + ")"));			break;		case checkLocation:			// Perceive about the current location			p = bridgeConnection.check_location();			removePerceptsByUnif(agName,					Literal.parseLiteral("location(_,_,_)"));			addPercept(					agName,					Literal.parseLiteral("location("							+ p.getLatitute() + ","							+ p.getLongitude() + ","							+ p.getHeight() + ")"));			break;		default:			;		}		return true;	}	@Override	public void stop() {		super.stop();	}}